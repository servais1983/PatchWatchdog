import requests
import time

API = "https://vulners.com/api/v3/burp/software/"

def check_vulners(package_list, max_packages=50):
    """
    V√©rifie les vuln√©rabilit√©s des packages via l'API Vulners.
    
    Args:
        package_list (list): Liste des packages √† v√©rifier
        max_packages (int): Nombre maximum de packages √† v√©rifier (pour √©viter les blocages)
    
    Returns:
        list: Liste des packages vuln√©rables
    """
    print(f"[üîç] V√©rification des vuln√©rabilit√©s pour {min(len(package_list), max_packages)} packages sur {len(package_list)} d√©tect√©s...")
    
    vulnerable = []
    # Limiter le nombre de packages pour √©viter les blocages
    limited_packages = package_list[:max_packages]
    
    for i, pkg in enumerate(limited_packages):
        # Afficher la progression tous les 10 packages
        if i > 0 and i % 10 == 0:
            print(f"[üîÑ] Progression: {i}/{len(limited_packages)} packages v√©rifi√©s...")
        
        try:
            # Ajouter un d√©lai pour √©viter de surcharger l'API
            if i > 0 and i % 5 == 0:
                time.sleep(0.5)
                
            r = requests.get(API, params={"software": pkg["package"], "version": pkg["version"]}, timeout=5)
            data = r.json()
            if data.get("data", {}).get("search"):
                for hit in data["data"]["search"]:
                    vulnerable.append({
                        "package": pkg["package"],
                        "version": pkg["version"],
                        "cve": hit.get("id", "unknown")
                    })
        except Exception as e:
            print(f"[‚ö†Ô∏è] Erreur lors de la v√©rification du package {pkg['package']}: {str(e)}")
            continue
    
    print(f"[‚úì] V√©rification termin√©e: {len(vulnerable)} vuln√©rabilit√©s d√©tect√©es.")
    return vulnerable